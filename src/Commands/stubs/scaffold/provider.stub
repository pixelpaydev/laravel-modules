<?php

namespace $NAMESPACE$;

use Illuminate\Support\Facades\Config;
use Illuminate\Support\ServiceProvider;
use Illuminate\Database\Eloquent\Factory;

class $CLASS$ extends ServiceProvider
{
	/**
	 * @var string $moduleName
	 */
	protected $moduleName = '$MODULE$';

	/**
	 * @var string $moduleNameLower
	 */
	protected $moduleNameLower = '$LOWER_NAME$';

	/**
	 * Boot the application events.
	 *
	 * @return void
	 */
	public function boot()
	{
		$this->registerTranslations();
		$this->registerConfig();
		$this->registerFactories();
		$this->registerCommands();
		$this->registerSchedule();
		$this->registerViews();
		
		$this->loadMigrationsFrom(module_path($this->moduleName, '$MIGRATIONS_PATH$'));

		if ($this->app->runningInConsole()) {
			$this->bootForConsole();
		}
	}

	/**
	 * Register the service provider.
	 *
	 * @return void
	 */
	public function register()
	{
		$this->app->register(RouteServiceProvider::class);
	}

	/**
	 * Register config.
	 *
	 * @return void
	 */
	protected function registerConfig()
	{
		$this->publishes([
			module_path($this->moduleName, '$PATH_CONFIG$/$LOWER_NAME$.php') => config_path($this->moduleNameLower . '.php'),
		], 'config');
		$this->mergeConfigFrom(
			module_path($this->moduleName, '$PATH_CONFIG$/$LOWER_NAME$.php'), $this->moduleNameLower
		);
	}

	/**
	 * Register translations.
	 *
	 * @return void
	 */
	public function registerTranslations()
	{
		$langPath = resource_path('lang/modules/' . $this->moduleNameLower);

		if (is_dir($langPath)) {
			$this->loadTranslationsFrom($langPath, $this->moduleNameLower);
		} else {
			$this->loadTranslationsFrom(module_path($this->moduleName, '$PATH_LANG$'), $this->moduleNameLower);
		}
	}

	/**
	 * Register an additional directory of factories.
	 *
	 * @return void
	 */
	public function registerFactories()
	{
		if (! app()->environment('production') && $this->app->runningInConsole()) {
			app(Factory::class)->load(module_path($this->moduleName, '$FACTORIES_PATH$'));
		}
	}

	/**
	 * Register commands.
	 *
	 * @return void
	 */
	public function registerCommands(){
		$this->commands([
			//
		]);
	}

	/**
	 * Register schedules.
	 *
	 * @return void
	 */
	public function registerSchedule() {
		$this->app->booted(function () {
			$schedule = $this->app->make(Schedule::class);
			// $schedule->command('command:name')->daily();
		});
	}

	/**
	 * Register views.
	 *
	 * @return void
	 */
	public function registerViews()
	{
		$viewPath = resource_path('views/modules/' . $this->moduleNameLower);
		$sourcePath = module_path($this->moduleName, '$PATH_VIEWS$');

		$this->publishes([
			$sourcePath => $viewPath
		], ['views', $this->moduleNameLower . '-views']);

		$this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [$sourcePath]), $this->moduleNameLower);
	}

	/**
	 * Get the publishable view paths.
	 *
	 * @return array
	 */
	private function getPublishableViewPaths(): array
	{
		$paths = [];

		foreach (Config::get('view.paths') as $path) {
			if (is_dir($path . '/modules/' . $this->moduleNameLower)) {
				$paths[] = $path . '/modules/' . $this->moduleNameLower;
			}
		}

		return $paths;
	}

	/**
	 * Get the services provided by the provider.
	 *
	 * @return array
	 */
	public function provides()
	{
		return [];
	}

	/**
	 * Register public resources.
	 *
	 * @return void
	 */
	protected function bootForConsole()
	{
		$this->publishes([
			__DIR__ . '/../Resources/public' => public_path('modules/$LOWER_NAME$'),
		], 'modules');
	}
}
